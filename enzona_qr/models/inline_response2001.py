# coding: utf-8

"""
    QRAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'qr_code': 'str',
        'amount': 'str',
        'currency': 'str',
        'description': 'str',
        'name': 'str',
        'avatar': 'str',
        'require_password': 'str',
        'username': 'str'
    }

    attribute_map = {
        'qr_code': 'qr_code',
        'amount': 'amount',
        'currency': 'currency',
        'description': 'description',
        'name': 'name',
        'avatar': 'avatar',
        'require_password': 'require_password',
        'username': 'username'
    }

    def __init__(self, qr_code=None, amount=None, currency=None, description=None, name=None, avatar=None, require_password=None, username=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._qr_code = None
        self._amount = None
        self._currency = None
        self._description = None
        self._name = None
        self._avatar = None
        self._require_password = None
        self._username = None
        self.discriminator = None

        if qr_code is not None:
            self.qr_code = qr_code
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if avatar is not None:
            self.avatar = avatar
        if require_password is not None:
            self.require_password = require_password
        if username is not None:
            self.username = username

    @property
    def qr_code(self):
        """Gets the qr_code of this InlineResponse2001.  # noqa: E501


        :return: The qr_code of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code):
        """Sets the qr_code of this InlineResponse2001.


        :param qr_code: The qr_code of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._qr_code = qr_code

    @property
    def amount(self):
        """Gets the amount of this InlineResponse2001.  # noqa: E501


        :return: The amount of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse2001.


        :param amount: The amount of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InlineResponse2001.  # noqa: E501


        :return: The currency of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse2001.


        :param currency: The currency of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this InlineResponse2001.  # noqa: E501


        :return: The description of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2001.


        :param description: The description of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this InlineResponse2001.  # noqa: E501


        :return: The name of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2001.


        :param name: The name of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def avatar(self):
        """Gets the avatar of this InlineResponse2001.  # noqa: E501


        :return: The avatar of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InlineResponse2001.


        :param avatar: The avatar of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def require_password(self):
        """Gets the require_password of this InlineResponse2001.  # noqa: E501


        :return: The require_password of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._require_password

    @require_password.setter
    def require_password(self, require_password):
        """Sets the require_password of this InlineResponse2001.


        :param require_password: The require_password of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._require_password = require_password

    @property
    def username(self):
        """Gets the username of this InlineResponse2001.  # noqa: E501


        :return: The username of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse2001.


        :param username: The username of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
