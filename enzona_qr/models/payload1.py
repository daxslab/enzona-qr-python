# coding: utf-8

"""
    QRAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Payload1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'currency': 'str',
        'description': 'str',
        'return_url': 'str',
        'notify_url': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'description': 'description',
        'return_url': 'return_url',
        'notify_url': 'notify_url'
    }

    def __init__(self, amount=None, currency=None, description=None, return_url=None, notify_url=None):  # noqa: E501
        """Payload1 - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._description = None
        self._return_url = None
        self._notify_url = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if return_url is not None:
            self.return_url = return_url
        if notify_url is not None:
            self.notify_url = notify_url

    @property
    def amount(self):
        """Gets the amount of this Payload1.  # noqa: E501


        :return: The amount of this Payload1.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payload1.


        :param amount: The amount of this Payload1.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Payload1.  # noqa: E501


        :return: The currency of this Payload1.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payload1.


        :param currency: The currency of this Payload1.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Payload1.  # noqa: E501


        :return: The description of this Payload1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Payload1.


        :param description: The description of this Payload1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def return_url(self):
        """Gets the return_url of this Payload1.  # noqa: E501


        :return: The return_url of this Payload1.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this Payload1.


        :param return_url: The return_url of this Payload1.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def notify_url(self):
        """Gets the notify_url of this Payload1.  # noqa: E501


        :return: The notify_url of this Payload1.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this Payload1.


        :param notify_url: The notify_url of this Payload1.  # noqa: E501
        :type: str
        """
        allowed_values = ["https://merchant.dominio/notify"]  # noqa: E501
        if notify_url not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_url` ({0}), must be one of {1}"  # noqa: E501
                .format(notify_url, allowed_values)
            )

        self._notify_url = notify_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payload1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payload1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
